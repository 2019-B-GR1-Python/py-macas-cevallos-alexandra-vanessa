
import pandas as pd
import os
import numpy as np

df1 = pd.DataFrame(["STD,City State",
	"33,Kolkata West_Bengal",
	"44,Chennai Tamil_Nadu",
	"40,Hyderabad Telengana",
	"80,Bangalore Karnataka"],columns=['row'])


1)  ¿Cómo dividir una columna de texto en dos columnas separadas?
    col = df1["row"].str.split(",", n = 1, expand = True) 
    col
-----------------------------
	0	1
0	STD	City State
1	33	Kolkata West_Bengal
2	44	Chennai Tamil_Nadu
3	40	Hyderabad Telengana
4	80	Bangalore Karnataka
-------------------------------

2) Cómo obtener la frecuencia de valores repetidos en tod0 el dataframe
    df2 = pd.DataFrame(np.random.randint(1, 10, 20).reshape(-1, 4), columns = list('abcd'))
    df2
        o
    df2 = pd.DataFrame(np.random.randint(1, 10, 20).reshape(-1, 4), columns = list('abcd'))
    df2
-------------------
	a	b	c	d
0	1	4	1	5
1	7	5	7	1
2	6	2	3	7
3	5	1	4	5
4	8	7	8	5
--------------------

3 ¿Cómo obtener las posiciones donde coinciden los valores de dos columnas?
    df3 = pd.DataFrame({'fruit1': np.random.choice(['apple', 'orange', 'banana'], 10),'fruit2': np.random.choice(['apple', 'orange', 'banana'], 10)})
    df3

------------------
fruit1	fruit2
0	apple	orange
1	apple	orange
2	apple	orange
3	banana	apple
4	banana	apple
5	apple	apple
6	apple	apple
7	apple	apple
8	orange	orange
9	apple	orange
----------------------
print(np.where(df['fruit1'] == df['fruit2']))
------------------------
(array([2, 8, 9]),)
-------------------------
4) A partir de un diccionario crear un DataFrame
    dict = {'X':[28,35,46,50,66], 'Y':[74,84,99,13,26],'Z':[36,47,56,62,73]}
    dict
----------------------------
{'X': [28, 35, 46, 50, 66],
 'Y': [74, 84, 99, 13, 26],
 'Z': [36, 47, 56, 62, 73]}
 ----------------------------
df4 = pd.DataFrame.from_dict(dict)
df4
-----------------------
	X	Y	Z
0	28	74	36
1	35	84	47
2	46	99	56
3	50	13	62
4	66	26	73
--------------------------
5) Genere 3 columnas con 5 elementos cada uno. Cree una función para eliminar los N primeras o N últimas filas
    matriz = np.arange(15).reshape([5,3])
    matriz
-----------------
array([[ 0,  1,  2],
       [ 3,  4,  5],
       [ 6,  7,  8],
       [ 9, 10, 11],
       [12, 13, 14]])
----------------
# 1) primer fila, 2) segunda fila, ...
def eliminar_fila_sup(no):
    elementos_a_eliminar = no * 3
    elementos = matriz.reshape([1,15])
    elementos = elementos[0, 3:]
    nuevo_array = np.array(elementos).reshape([(5 - no), 3])
    print(nuevo_array)

# 1) primer fila, 2) segunda fila, ...
def eliminar_fila_inf(no):
    elementos_a_eliminar = no * 3
    elementos = matriz.reshape([1,15])
    indice = 15 - elementos_a_eliminar
    elementos = elementos[0,0:indice]
    nuevo_array = np.array(elementos).reshape([(5 - no), 3])
    print(nuevo_array)

eliminar_fila_inf(1)
----------------
[[ 0  1  2]
 [ 3  4  5]
 [ 6  7  8]
 [ 9 10 11]]
-------------------
def eliminar(no, type):
    if type == 'sup':
        eliminar_fila_sup(no)
    if type == 'inf':
        eliminar_fila_inf(no)

eliminar(2, 'inf')
-----------------
[[0 1 2]
 [3 4 5]
 [6 7 8]]
 ----------------
6) Genere 5 columnas con 5 elementos cada uno. Cree una función para ordenar de forma ascendente o descendente los datos por columna.
matriz5_5 = np.arange(25).reshape([5,5])
df5 = pd.DataFrame(matriz5_5)
df5
-------------------------
0	1	2	3	4
0	0	1	2	3	4
1	5	6	7	8	9
2	10	11	12	13	14
3	15	16	17	18	19
4	20	21	22	23	24
---------------------
cols = list(df5.columns.values)
cols
---------------
[0, 1, 2, 3, 4]
--------------
sortdf = df5.sort_values(cols, ascending=False)
sortdf
-----------------------
0	1	2	3	4
4	20	21	22	23	24
3	15	16	17	18	19
2	10	11	12	13	14
1	5	6	7	8	9
0	0	1	2	3	4
-----------------------
def order(asc):
    for i in cols:
        array = df5[i]
        df5[i] = array.sort_values(ascending=asc)
    print(df5)
In [167]:
order(False)
---------------------
    0   1   2   3   4
0   0   1   2   3   4
1   5   6   7   8   9
2  10  11  12  13  14
3  15  16  17  18  19
4  20  21  22  23  24
---------------------
7) Genere 4 columnas con 5 elementos cada uno. Cree una función para obtener los N primeros o N ultimos registros.
    df7 = pd.DataFrame(np.random.randint(1, 10, 20).reshape(-1, 4), columns=list('ABCD'))
    df7
---------------------
	A	B	C	D
0	8	9	4	2
1	7	1	2	9
2	8	9	7	5
3	4	6	5	6
4	8	3	4	2
--------------------
def func7(n, condicion): #recibe true para los pirmeros y false para los ultimos
	if(condicion == True):
		return(df7[:n])
	else:
		return(df7[n+1:])


func7(2,True)

-----------------
	A	B	C	D
0	8	9	4	2
1	7	1	2	9
------------------
8) Genere 4 columnas con 5 elementos cada uno. Cree una función para obtener los N primeros o N ultimos registros.
df8 = pd.DataFrame(np.random.randint(1, 10, 20).reshape(-1, 4), columns=list('ABCD'))
df8
------------
	A	B	C	D
0	2	1	5	5
1	3	5	2	1
2	1	3	2	3
3	4	2	7	1
4	9	9	2	1
--------------------
def func8(n, condicion): #recibe true para los pirmeros y false para los ultimos
	if(condicion == True):
		return(df8[:n])
	else:
		return(df8[n+1:])

func8(2,True)
-----------------
A	B	C	D
0	2	1	5	5
1	3	5	2	1
------------------
9) Genere 6 columnas con 5 elementos cada uno. Cree una función para obtener un nuevo DataFrame sin la columna X.
df9 = pd.DataFrame(np.random.randint(1, 10, 30).reshape(-1, 6), columns=list('ABCDEF'))
df9
---------------------------
A	B	C	D	E	F
0	5	9	4	1	4	3
1	7	3	8	3	7	4
2	1	4	2	7	9	9
3	1	2	6	3	4	6
4	1	1	8	6	7	8
---------------------------

def func9(n): #recibe la columna X
	return(df9.drop(n,1))

func9('E')
-------------------------
A	B	C	D	F
0	5	9	4	1	3
1	7	3	8	3	4
2	1	4	2	7	9
3	1	2	6	3	6
4	1	1	8	6	8
-----------------------
10) Genere 3 columnas con 5 elementos cada uno. Cree una función para obtener el numero de columnas en un dataframe
df10 = pd.DataFrame(np.random.randint(1, 10, 15).reshape(-1, 3), columns=list('ABC'))
df10
-----------------
A	B	C
0	8	9	6
1	2	9	9
2	9	9	6
3	9	5	8
4	5	1	3
-----------------
def func10(df):
	return df.shape[1]

print("Num de cols = " + str(func10(df10)))
-----------------
Num de cols = 3
-------------------
1) Genere 2 columnas con 20 elementos cada uno. La primera columna debe de tener uno de los siguientes valores: C1, C2, C3 y C4. Estos valores se pueden repetir. La segunda columna tiene valores de números cualesquiera. Cree una función para agrupar por la Primera Columna y que se listenlos valores agrupados de la segunda Columna.
df = pd.DataFrame({'column': np.random.choice(['C1', 'C2', 'C3', 'C4'], 20),
                   'number': np.random.choice(['1','2','3','4','5','6','7','8','9','0'], 20)})
df
---------

column	number
0	C2	3
1	C4	2
2	C2	6
3	C3	9
4	C2	7
5	C2	4
6	C3	2
7	C1	2
8	C4	8
9	C1	6
10	C1	2
11	C3	4
12	C3	7
13	C2	6
14	C3	2
15	C1	6
16	C3	7
17	C2	9
18	C3	5
19	C2	2
------------
df.groupby(['column'])['number'].apply(lambda x:','.join(list(x)))
-------------------------
column
C1          2,6,2,6
C2    3,6,7,4,6,9,2
C3    9,2,4,7,2,7,5
C4              2,8
Name: number, dtype: object
-------------------------------
12) Cree una función para crear un DataFrame a partir de una lista de listas. Suponga que la lista en la posicion 0 siempre son las cabeceras.
def generate_dataframe(list_of_list):
    return pd.DataFrame(list_of_list[1:], columns=list_of_list[0])

my_lists = [['col1', 'col2'], [2, 4], [1, 3]]
my_lists
-------------
[['col1', 'col2'], [2, 4], [1, 3]]
----------------------------------
df = generate_dataframe(my_lists)
df
----------------
col1	col2
0	2	4
1	1	3
---------------
13) Escriba una funcion que inserte en un indice especifico una nueva columna de datos en un DataFrame. Cree un DataFrame de ejemplo para probar su funcion.
df = pd.DataFrame({'column': np.random.choice(['C1', 'C2', 'C3', 'C4'], 5)})
df
----------
column
0	C2
1	C1
2	C2
3	C4
4	C1
---------
def insert_column(df,name,new_col,index):
    df.insert(loc=index, column=name, value=new_col)
    return(df)

insert_column(df,'new_col',np.random.choice(['apple', 'orange', 'banana'], 5),0)
---------------
new_col	column
0	banana	C2
1	banana	C1
2	banana	C2
3	apple	C4
4	apple	C1
-------------
14) Escriba una funcion para eliminar los valores de numpy “inf”, “-inf” es decir Infinite Positive e Infinite negative de un dataframe por NaN. Cree un DataFrame de ejemplo para probar su funcion.
df14 = pd.DataFrame({'col1':[4,5,np.inf,9,5], 'col2':[7,8,np.NINF,1,11]})
df14
--------------------------
col1	col2
0	4.000000	7.000000
1	5.000000	8.000000
2	inf	-inf
3	9.000000	1.000000
4	5.000000	11.000000
--------------------------
def func14(df):
    return(df.replace([np.inf,np.NINF], np.nan))
In [191]:
func14(df14)
---------------
col1	col2
0	4.0	7.0
1	5.0	8.0
2	NaN	NaN
3	9.0	1.0
4	5.0	11.0
-------------
15) Cree una funcion para cambiar strings o flotantes a tipo de dato entero de una columna y booleanos a 0 si es falso o 1 si es verdadero (tambien debe de quedar cambiada la columna a tipo entero). Cree un DataFrame de ejemplo para probar su funcion.
df = pd.DataFrame([['Ana',True,12.50],['Pedro',False,12.50],['Juan',True,2.50]],columns=['Nombre','humano','dinero'])
df
------------------------
Nombre	humano	dinero
0	Ana	True	12.5
1	Pedro	False	12.5
2	Juan	True	2.5
---------------------
df.dtypes
---------------
Nombre     object
humano       bool
dinero    float64
dtype: object
-------------------------
def func15(df,tipoAnt,tipoNuev):
    df.
--------------------------------------------------
File "<ipython-input-130-05fcda9a3c66>", line 3
    True df.iloc[i]['humano']
          ^
SyntaxError: invalid syntax
-----------------------------------------------------------
16) Escriba una funcion para ordenar un dataframe por 2 o mas columnas. Cree un DataFrame de ejemplo para probar sufuncion.
df16 = pd.DataFrame(np.random.randint(1, 10, 25).reshape(-1, 5), columns=list('ABCDE'))
df16
-------------------------
A	B	C	D	E
0	1	6	6	8	9
1	7	3	5	9	4
2	1	8	4	9	9
3	4	5	7	2	1
4	3	3	9	2	1
------------------------------
def func16(condicion,df,col): #recibe true para ascendente y false para descendente
	return(df.sort_values(col,ascending=condicion))
In [171]:
func6(False,df16,['B','C'])
---------------------------
A	B	C	D	E
2	1	8	4	9	9
0	1	6	6	8	9
3	4	5	7	2	1
4	3	3	9	2	1
1	7	3	5	9	4
----------------------------
17) Escriba una funcion para buscar en que columnas se repite cierto valor y cuales no. Cree un DataFrame de ejemplo para probar su funcion.
df = pd.DataFrame({'fruta1': np.random.choice(['manzana', 'pera', 'piña'], 5),
                   'fruta2': np.random.choice(['manzana', 'pera', 'piña'], 5),
                   'fruta3': np.random.choice(['manzana', 'pera', 'piña'], 5),
                   'fruta4': np.random.choice(['manzana', 'pera', 'piña'], 5),
                   'fruta5': np.random.choice(['manzana', 'pera', 'piña'], 5),
                   'fruta6': np.random.choice(['manzana', 'pera', 'piña'], 5)})
df
------------------------------------------------
fruta1	fruta2	fruta3	fruta4	fruta5	fruta6
0	piña	manzana	manzana	manzana	manzana	pera
1	piña	manzana	pera	piña	pera	pera
2	pera	pera	piña	pera	pera	pera
3	piña	pera	pera	pera	piña	piña
4	pera	pera	manzana	pera	pera	pera
---------------------------------------------------
def find_value(df,llave):
    return(df == llave)

find_value(df,'pera')
-----------------------------------------------------
fruta1	fruta2	fruta3	fruta4	fruta5	fruta6
0	False	False	False	False	False	True
1	False	False	True	False	True	True
2	True	True	False	True	True	True
3	False	True	True	True	False	False
4	True	True	False	True	True	True
---------------------------------------------------

o
np.random.RandomState(100)
ser = pd.Series(np.random.randint(1, 5, [10]))

df = pd.DataFrame(ser)
df
--------
0
0	3
1	1
2	4
3	4
4	3
5	2
6	3
7	4
8	2
9	2
---------
valores_repetidos = df[0].value_counts()
print(valores_repetidos)
------
4    3
3    3
2    3
1    1
Name: 0, dtype: int64
------------
valores_repetidos.index
------------------
Int64Index([4, 3, 2, 1], dtype='int64')
--------------------------------------
def funcion(df):
    return df[0].value_counts()

18) Escriba una funcion para listar los valores minimos o maximos de toda la columna de un subconjunto de columnas. El programa debe de devolver el nombre de la columnas y el arreglo de indices de fila de los valores minimos y maximos. Cree un DataFrame de ejemplo para probar su funcion.
def valoresMax(df, posicionColumna):
    return df[posicionColumna].max()
    
def valoresMin(df, posicionColumna):
    return df[posicionColumna].min()
----------------
4
-------------------
valoresMax()
valoresMin()

19) Escriba una funcion que reciba como parametro un arreglo de nombres de columna y devuelva un diccionario de columnas con los valores de esa columna como “lista”. El tipo de dato del valor de cada elemento del diccionario debe ser “lista”.

In [ ]:

20) Escriba una funcion que reciba como parametros el numero de filas y que devuelva la selección de un subconjunto de elementos randomicos del DataSet.





